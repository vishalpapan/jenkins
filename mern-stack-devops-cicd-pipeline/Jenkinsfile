pipeline {
    agent {
        docker {
            image 'node:18-alpine'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    
    environment {
        DOCKER_HUB_CREDENTIALS = credentials('docker-cred')
        GITHUB_TOKEN = credentials('github')
        DOCKER_IMAGE = 'vishalpapan/task-manager-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
        GIT_REPO = 'https://github.com/vishalpapan/jenkins.git'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Install Dependencies') {
            steps {
                script {
                    // Install Docker CLI in the container
                    sh '''
                        apk add --no-cache docker-cli curl git
                        npm --version
                        docker --version
                    '''
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                    sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest"
                }
            }
        }
        
        stage('Test Application') {
            steps {
                script {
                    // Test if image runs successfully
                    sh "docker run --rm -d --name test-container ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    sh "sleep 10"
                    sh "docker exec test-container curl -f http://localhost:5000/health || exit 1"
                    sh "docker stop test-container"
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'docker-cred') {
                        sh "docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
                        sh "docker push ${DOCKER_IMAGE}:latest"
                    }
                }
            }
        }
        
        stage('Update Kubernetes Manifests') {
            steps {
                script {
                    // Update deployment.yaml with new image tag
                    sh """
                        sed -i 's|image: .*|image: ${DOCKER_IMAGE}:${DOCKER_TAG}|g' k8s/deployment.yaml
                        
                        # Configure git
                        git config user.email "jenkins@devops.com"
                        git config user.name "Jenkins CI"
                        
                        # Add and commit changes
                        git add k8s/deployment.yaml
                        git commit -m "Update image tag to ${DOCKER_TAG} [skip ci]" || echo "No changes to commit"
                    """
                }
            }
        }
        
        stage('Push Manifest Changes') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                        sh """
                            git remote set-url origin https://vishalpapan:${GITHUB_TOKEN}@github.com/vishalpapan/jenkins.git
                            git push origin HEAD:main || echo "No changes to push"
                        """
                    }
                }
            }
        }
        
        stage('Generate Deployment Manifest') {
            steps {
                script {
                    // Create a complete deployment manifest for ArgoCD
                    sh """
                        mkdir -p manifests
                        cat > manifests/complete-deployment.yaml << EOF
# Complete Kubernetes Deployment Manifest
# Generated by Jenkins Build: ${BUILD_NUMBER}
# Image: ${DOCKER_IMAGE}:${DOCKER_TAG}
# Date: \$(date)

apiVersion: v1
kind: Namespace
metadata:
  name: task-manager
---
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: task-manager
type: Opaque
data:
  mongodb-uri: bW9uZ29kYjovL21vbmdvZGI6MjcwMTcvdGFza21hbmFnZXI=
  jwt-secret: eW91ci1zdXBlci1zZWNyZXQtand0LWtleS1jaGFuZ2UtaW4tcHJvZHVjdGlvbg==
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: task-manager-app
  namespace: task-manager
  labels:
    app: task-manager
    version: "${DOCKER_TAG}"
spec:
  replicas: 3
  selector:
    matchLabels:
      app: task-manager
  template:
    metadata:
      labels:
        app: task-manager
        version: "${DOCKER_TAG}"
    spec:
      containers:
      - name: task-manager
        image: ${DOCKER_IMAGE}:${DOCKER_TAG}
        ports:
        - containerPort: 5000
        env:
        - name: NODE_ENV
          value: "production"
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: mongodb-uri
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: jwt-secret
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: task-manager-service
  namespace: task-manager
  labels:
    app: task-manager
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 5000
    protocol: TCP
    name: http
  selector:
    app: task-manager
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: task-manager-ingress
  namespace: task-manager
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - host: task-manager.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: task-manager-service
            port:
              number: 80
EOF
                    """
                    
                    // Archive the manifest
                    archiveArtifacts artifacts: 'manifests/complete-deployment.yaml', fingerprint: true
                }
            }
        }
    }
    
    post {
        always {
            // Clean up Docker images
            sh "docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true"
            sh "docker rmi ${DOCKER_IMAGE}:latest || true"
            
            // Clean up test containers
            sh "docker rm -f test-container || true"
        }
        success {
            echo "✅ Pipeline completed successfully!"
            echo "🐳 Docker Image: ${DOCKER_IMAGE}:${DOCKER_TAG}"
            echo "📦 Manifest updated in repository"
            echo "🚀 Ready for ArgoCD deployment"
        }
        failure {
            echo "❌ Pipeline failed!"
        }
    }
}
